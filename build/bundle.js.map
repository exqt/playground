{"version":3,"file":"bundle.js","sources":["../../src/scene.js","../../src/utils/shader.js","../../src/utils/texture.js","../../src/main.js","../../src/scenes/colorTriangle.js","../../src/scenes/pixelSort.js"],"sourcesContent":["class Scene {\n  constructor(name, width, height) {\n    this.name = name\n    this.canvas = document.createElement(\"canvas\")\n    this.canvas.width = width | 400\n    this.canvas.height = height | 400\n    this.canvas.id = name + \"-canvas\"\n    this.canvas.addEventListener('click', this.onClick)\n    document.querySelector(\"#canvas-wrapper\").appendChild(this.canvas)\n  }\n\n  release() {\n    let p = document.querySelector(\"#canvas-wrapper\")\n    while(p.hasChildNodes()) p.removeChild(p.lastChild)\n  }\n  \n  onDrop(file) {\n\n  }\n  \n  onClick() {\n\n  }\n  \n  update(dt) {\n\n  }\n}\n\nexport default Scene\n","//\n// Initialize a shader program, so WebGL knows how to draw our data\n//\nexport function initShaderProgram(gl, vsSource, fsSource) {\n  const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);\n  const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\n\n  // Create the shader program\n\n  const shaderProgram = gl.createProgram();\n  gl.attachShader(shaderProgram, vertexShader);\n  gl.attachShader(shaderProgram, fragmentShader);\n  gl.linkProgram(shaderProgram);\n\n  // If creating the shader program failed, alert\n\n  if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n    alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\n    return null;\n  }\n\n  return shaderProgram;\n}\n\n//\n// creates a shader of the given type, uploads the source and\n// compiles it.\n//\nexport function loadShader(gl, type, source) {\n  const shader = gl.createShader(type);\n\n  // Send the source to the shader object\n\n  gl.shaderSource(shader, source);\n\n  // Compile the shader program\n\n  gl.compileShader(shader);\n\n  // See if it compiled successfully\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    alert('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));\n    gl.deleteShader(shader);\n    return null;\n  }\n\n  return shader;\n}\n","export function createAndSetupTexture(gl) {\n  var texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n  return texture;\n}\n ","import ColorTriangleScene from \"./scenes/colorTriangle\"\nimport PixelSortScene from \"./scenes/pixelSort\"\n\nconst scenes = {\n  colorTriangle: ColorTriangleScene,\n  pixelSort: PixelSortScene,\n}\n\nlet currentScene = null\nlet sceneSelect = document.querySelector(\"#scene-select\")\nfunction loadScene(name) {\n  if (scenes[name]) sceneSelect.value = name\n  else return false\n\n  if (currentScene) currentScene.release()\n  currentScene = new scenes[name]\n  return true\n}\n\nsceneSelect.onchange = (e) => { loadScene(sceneSelect.value) }\n\ndocument.ondragover = (e) => { e.stopPropagation(); e.preventDefault() }\ndocument.ondrop = (e) => {\n  e.stopPropagation()\n  e.preventDefault()\n  if (currentScene) {\n    let dt = e.dataTransfer\n    let file = dt.files[0]\n    currentScene.onDrop(file)\n  }\n}\n\nfor(let [name, cls] of Object.entries(scenes)) {\n  let opt = document.createElement(\"option\")\n  opt.value = name\n  opt.text = name\n  sceneSelect.append(opt)\n}\n\n///\nlet urlParams = new URLSearchParams(window.location.search)\nlet initScene = urlParams.get('scene')\nif (!loadScene(initScene)) console.log(loadScene(\"colorTriangle\"))\n\n// update\nlet start;\nconst draw = (timestamp) => { \n  if (start === undefined) start = timestamp\n  const dt = (timestamp - start)/1000\n\n  if (currentScene) currentScene.update(dt)\n  start = timestamp\n  window.requestAnimationFrame(draw)\n}\nwindow.requestAnimationFrame(draw)\n","import Scene from \"../scene\"\nimport * as shaderUtil from \"../utils/shader\"\n\nconst vsSource = `\nattribute vec2 aPosition;\nattribute vec4 aColor;\nuniform mat2 uMat;\nvarying vec4 vColor;\n\nvoid main() {\n  vColor = aColor;\n  gl_Position = vec4(uMat*aPosition, 1.0, 1.0);\n}\n`;\nconst fsSource = `\nprecision mediump float;\n\nvarying vec4 vColor;\n\nvoid main() {\n  gl_FragColor = vColor;\n}\n`;\n\nclass ColorTriangleScene extends Scene {\n  constructor() {\n    super(\"color-triangle\", 400, 400)\n    \n    this.time = 0\n\n    let gl = this.canvas.getContext(\"webgl\")\n    this.program = shaderUtil.initShaderProgram(gl, vsSource, fsSource);\n    gl.useProgram(this.program)\n    \n    this.location = {\n      position: gl.getAttribLocation(this.program, \"aPosition\"),\n      color: gl.getAttribLocation(this.program, \"aColor\"),\n      mat: gl.getUniformLocation(this.program, \"uMat\"),\n    }\n    \n    this.buffer = {}\n    this.buffer.position = gl.createBuffer()\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer.position)\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\n      Math.cos(3/12*2*Math.PI), Math.sin(3/12*2*Math.PI),\n      Math.cos(7/12*2*Math.PI), Math.sin(7/12*2*Math.PI),\n      Math.cos(11/12*2*Math.PI), Math.sin(11/12*2*Math.PI),\n    ]), gl.STATIC_DRAW)\n\n    this.buffer.color = gl.createBuffer()\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer.color)\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\n      1.0, 0.0, 0.0, 1.0,\n      0.0, 1.0, 0.0, 1.0,\n      0.0, 0.0, 1.0, 1.0,\n    ]), gl.STATIC_DRAW)\n    \n    {\n      gl.enableVertexAttribArray(this.location.position)\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer.position)\n      gl.vertexAttribPointer(this.location.position, 2, gl.FLOAT, false, 0, 0)\n    }\n    {\n      gl.enableVertexAttribArray(this.location.color)\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer.color)\n      gl.vertexAttribPointer(this.location.color, 4, gl.FLOAT, false, 0, 0)\n    }\n  }\n\n  update(dt) {\n    this.time = this.time + dt\n\n    let gl = this.canvas.getContext(\"webgl\")\n    \n    gl.clearColor(0, 0, 0, 1);\n    gl.clear(gl.COLOR_BUFFER_BIT)\n\n    gl.uniformMatrix2fv(this.location.mat, false, new Float32Array([\n      Math.cos(this.time), Math.sin(this.time),\n      -Math.sin(this.time), Math.cos(this.time)\n    ]));\n \n    gl.drawArrays(gl.TRIANGLES, 0, 3);\n  }\n}\n\nexport default ColorTriangleScene\n","import Scene from \"../scene\"\nimport * as shaderUtil from \"../utils/shader\"\nimport * as textureUtil from \"../utils/texture\"\n\nconst vsSource = `\nattribute vec2 aPosition;\nattribute vec2 aTexCoord;\nvarying vec2 vTexCoord;\nuniform float uYflip;\n\nvoid main() {\n  vTexCoord = aTexCoord;\n  if(uYflip == 1.0) vTexCoord.y = 1.0 - vTexCoord.y;\n  gl_Position = vec4(aPosition, 1.0, 1.0);\n}\n`;\nconst fsSource = `\nprecision mediump float;\n\nuniform sampler2D uImage;\nuniform vec2 uTextureSize;\nuniform float uStep;\nvarying vec2 vTexCoord;\n\nfloat brightness(vec4 c) {\n  return 0.2126*c.x + 0.7152*c.y + 0.0722*c.z;\n}\n\nfloat comp(vec4 a, vec4 b) {\n  return brightness(a) - brightness(b);\n}\n\nvoid main() {\n  vec2 onePixel = vec2(1.0, 1.0) / uTextureSize;\n  vec4 color = vec4(0.0);\n  \n  float parity = fract(uStep/2.0 + vTexCoord.y*uTextureSize.y/2.0);\n\n  if (parity < 0.5) {\n    vec4 c1 = texture2D(uImage, vTexCoord);\n    vec4 c2 = texture2D(uImage, vTexCoord + vec2(0, onePixel.y));\n\n    if (vTexCoord.y + onePixel.y >= 1.0) color = c1;\n    else color = comp(c1, c2) >= 0.0 ? c1 : c2;\n  }\n  else {\n    vec4 c1 = texture2D(uImage, vTexCoord - vec2(0, onePixel.y));\n    vec4 c2 = texture2D(uImage, vTexCoord);\n\n    if (vTexCoord.y - onePixel.y <= 0.0) color = c2;\n    else color = comp(c2, c1) < 0.0 ? c2 : c1;\n  }\n  \n  gl_FragColor = color;\n}\n`;\n\nclass PixelSortScene extends Scene {\n  constructor() {\n    super(\"pixel-sort\", 400, 400)\n\n    this.input = document.createElement(\"input\")\n    this.input.type = \"file\"\n    this.input.addEventListener(\"change\", (e) => {\n      let file = e.target.files[0]\n      this.onDrop(file)\n    })\n    document.querySelector(\"#canvas-wrapper\").append(this.input)\n\n    let gl = this.canvas.getContext(\"webgl\")\n    this.program = shaderUtil.initShaderProgram(gl, vsSource, fsSource);\n    gl.useProgram(this.program)\n    \n    this.location = {\n      position: gl.getAttribLocation(this.program, \"aPosition\"),\n      texCoord: gl.getAttribLocation(this.program, \"aTexCoord\"),\n      textureSize: gl.getUniformLocation(this.program, \"uTextureSize\"),\n      step: gl.getUniformLocation(this.program, \"uStep\"),\n      yflip: gl.getUniformLocation(this.program, \"uYflip\"),\n    }\n    \n    this.buffer = {}\n    this.buffer.position = gl.createBuffer()\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer.position)\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\n      -1, -1,\n      1, -1,\n      -1, 1,\n      -1, 1,\n      1, -1,\n      1, 1,\n    ]), gl.STATIC_DRAW)\n\n    this.buffer.texCoord = gl.createBuffer()\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer.texCoord)\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\n      0, 0,\n      1, 0,\n      0, 1,\n      0, 1,\n      1, 0,\n      1, 1\n    ]), gl.STATIC_DRAW)\n\n    gl.enableVertexAttribArray(this.location.position)\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer.position)\n    gl.vertexAttribPointer(this.location.position, 2, gl.FLOAT, false, 0, 0)\n\n    gl.enableVertexAttribArray(this.location.texCoord)\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer.texCoord)\n    gl.vertexAttribPointer(this.location.texCoord, 2, gl.FLOAT, false, 0, 0)\n  }\n  \n  onDrop(file) {\n    let reader = new FileReader()\n    reader.onload = (e) => {\n      let image = new Image()\n      image.src = e.target.result\n      image.onload = () => { this.setImage(image) }\n    }\n    reader.readAsDataURL(file)\n  }\n  \n  setImage(image) {\n    let gl = this.canvas.getContext(\"webgl\")\n    \n    this.canvas.width = image.width\n    this.canvas.height = image.height\n    this.originalImageTexture = textureUtil.createAndSetupTexture(gl)\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image)\n\n    this.textures = []\n    this.framebuffers = []\n    for (let ii = 0; ii < 2; ++ii) {\n      let texture = textureUtil.createAndSetupTexture(gl)\n      this.textures.push(texture)\n  \n      gl.texImage2D(\n        gl.TEXTURE_2D, 0, gl.RGBA, image.width, image.height, 0,\n        gl.RGBA, gl.UNSIGNED_BYTE, null)\n  \n      let fbo = gl.createFramebuffer()\n      this.framebuffers.push(fbo)\n      gl.bindFramebuffer(gl.FRAMEBUFFER, fbo)\n  \n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0)\n    }\n    \n    gl.viewport(0, 0, this.canvas.width, this.canvas.height);\n    this.step = 0\n    gl.uniform2f(this.location.textureSize, image.width, image.height);\n    gl.bindTexture(gl.TEXTURE_2D, this.originalImageTexture);\n  }\n  \n  update(dt) {\n    if(!this.originalImageTexture) return\n    let gl = this.canvas.getContext(\"webgl\")\n\n    let draw = (flip) => {\n      flip = flip | 0.0\n\n      gl.clearColor(0, 1, 0, 1.0);\n      gl.clear(gl.COLOR_BUFFER_BIT);\n\n      gl.uniform1f(this.location.step, this.step);\n      gl.uniform1f(this.location.yflip, flip);\n      gl.drawArrays(gl.TRIANGLES, 0, 6);\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffers[this.step%2])\n    draw()\n    \n    gl.bindFramebuffer(gl.FRAMEBUFFER, null)\n    gl.bindTexture(gl.TEXTURE_2D, this.textures[this.step%2])\n    draw(1.0)\n    this.step++\n  }\n}\n\nexport default PixelSortScene\n"],"names":["Scene","[object Object]","name","width","height","this","canvas","document","createElement","id","addEventListener","onClick","querySelector","appendChild","p","hasChildNodes","removeChild","lastChild","file","dt","initShaderProgram","gl","vsSource","fsSource","vertexShader","loadShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","alert","getProgramInfoLog","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","createAndSetupTexture","texture","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","scenes","colorTriangle","super","time","getContext","program","shaderUtil.initShaderProgram","useProgram","location","position","getAttribLocation","color","mat","getUniformLocation","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","Math","cos","PI","sin","STATIC_DRAW","enableVertexAttribArray","vertexAttribPointer","FLOAT","clearColor","clear","COLOR_BUFFER_BIT","uniformMatrix2fv","drawArrays","TRIANGLES","pixelSort","input","e","target","files","onDrop","append","texCoord","textureSize","step","yflip","reader","FileReader","onload","image","Image","src","result","setImage","readAsDataURL","originalImageTexture","textureUtil.createAndSetupTexture","texImage2D","RGBA","UNSIGNED_BYTE","textures","framebuffers","ii","push","fbo","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","uniform2f","draw","flip","uniform1f","start","currentScene","sceneSelect","loadScene","value","release","onchange","ondragover","stopPropagation","preventDefault","ondrop","dataTransfer","cls","Object","entries","opt","text","URLSearchParams","window","search","get","console","log","timestamp","undefined","update","requestAnimationFrame"],"mappings":"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"}